#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const telemetry = (/--telemetry[=\s]+([^\s]*)/i).exec(process.argv.join(' '));
const utils_1 = require("@hint/utils");
const telemetryEnv = process.env.HINT_TELEMETRY;
let enableTelemetry;
if (telemetry) {
    enableTelemetry = telemetry[1] === 'on';
}
else if (telemetryEnv) {
    enableTelemetry = telemetryEnv === 'on';
}
if (typeof enableTelemetry !== 'undefined') {
    if (enableTelemetry) {
        utils_1.appInsights.enable();
    }
    else {
        utils_1.appInsights.disable();
    }
}
const cli = require("../lib/cli");
const { trackException, sendPendingData } = utils_1.appInsights;
process.once('uncaughtException', async (err) => {
    console.error(err.message);
    console.error(err.stack);
    trackException(err);
    await sendPendingData(true);
    process.exit(1);
});
process.once('unhandledRejection', async (r) => {
    const reason = r;
    const source = reason && reason instanceof Error ? reason : reason.error;
    trackException(source);
    await sendPendingData(true);
    console.error(`Unhandled rejection promise:
    uri: ${source.uri}
    message: ${source.message}
    stack:
${source.stack}`);
    process.exit(1);
});
const run = async () => {
    process.exitCode = await cli.execute(process.argv);
    process.exit(process.exitCode);
};
run();
