import { FetchEnd, FetchError, FetchStart, Event, ErrorEvent, Events } from 'hint';
import { JSONLocationFunction, ISchemaValidationError, GroupedError } from '@hint/utils-json';
export declare type ManifestPlatform = 'itunes' | 'play' | 'windows';
export declare type ManifestImageResource = {
    platform?: ManifestPlatform;
    purpose: string;
    sizes?: string;
    src: string;
    type?: string;
};
export declare type ManifestExternalApplicationResourceFingerprint = {
    type: string;
    value: string;
};
export declare type ManifestExternalApplicationResources = {
    platform: ManifestPlatform;
    fingerprints?: ManifestExternalApplicationResourceFingerprint[];
    id?: string;
    min_version?: string;
    url?: string;
};
export declare type ServiceWorkerRegistrationObject = {
    scope?: string;
    src?: string;
    type: 'classic' | 'module';
    update_via_cache: 'all' | 'imports' | 'none';
};
export declare type Manifest = {
    background_color?: string;
    categories?: Array<'books' | 'business' | 'education' | 'entertainment' | 'finance' | 'fitness' | 'food' | 'games' | 'government' | 'health' | 'kids' | 'lifestyle' | 'magazines' | 'medical' | 'music' | 'navigation' | 'news' | 'personalization' | 'photo' | 'politics' | 'productivity' | 'security' | 'shopping' | 'social' | 'sports' | 'travel' | 'utilities' | 'weather'>;
    description?: string;
    dir: 'auto' | 'ltr' | 'rtl';
    display: 'browser' | 'fullscreen' | 'minimal-ui' | 'standalon';
    iarc_rating_id?: string;
    icons?: ManifestImageResource[];
    lang?: string;
    name?: string;
    orientation: 'any' | 'landscape' | 'landscape-primary' | 'landscape-secondary' | 'natural' | 'portrait' | 'portrait-primary' | 'portrait-secondar';
    prefer_related_applications: boolean;
    related_applications?: ManifestExternalApplicationResources[];
    scope?: string;
    screenshots?: ManifestImageResource[];
    serviceworker?: ServiceWorkerRegistrationObject;
    short_name?: string;
    start_url?: string;
    theme_color?: string;
    [other: string]: any;
};
export declare type ManifestInvalidJSON = ErrorEvent;
export declare type ManifestInvalidSchema = ErrorEvent & {
    errors: ISchemaValidationError[];
    groupedErrors: GroupedError[];
    prettifiedErrors: string[];
};
export declare type ManifestParsed = Event & {
    getLocation: JSONLocationFunction;
    parsedContent: Manifest;
};
export declare type ManifestEvents = Events & {
    'fetch::end::manifest': FetchEnd;
    'fetch::error::manifest': FetchError;
    'fetch::start::manifest': FetchStart;
    'parse::end::manifest': ManifestParsed;
    'parse::error::manifest::schema': ManifestInvalidSchema;
    'parse::error::manifest::json': ManifestInvalidJSON;
    'parse::start::manifest': Event;
};
//# sourceMappingURL=types.d.ts.map