"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const parse5 = require("parse5");
const htmlparser2Adapter = require("parse5-htmlparser2-tree-adapter");
const src_1 = require("../src");
const globals_1 = require("../src/globals");
const htmldocument_1 = require("../src/htmldocument");
ava_1.default('getComputedStyle', (t) => {
    const context = {};
    const dom = parse5.parse('<body>Test</body>', {
        sourceCodeLocationInfo: false,
        treeAdapter: htmlparser2Adapter
    });
    const bodyData = dom.children[0].children[1];
    bodyData['x-styles'] = { display: 'none' };
    const doc = new htmldocument_1.HTMLDocument(dom, 'https://localhost');
    globals_1.populateGlobals(context, doc);
    t.truthy(context.getComputedStyle);
    t.is(context.getComputedStyle(doc.body).getPropertyValue('display'), 'none');
});
ava_1.default('instanceof', (t) => {
    const context = {};
    const doc = src_1.createHTMLDocument('test', 'http://localhost/');
    globals_1.populateGlobals(context, doc);
    t.true(context.document instanceof context.HTMLDocument);
    t.true(context.document.body instanceof context.HTMLBodyElement);
    t.true(context.document.body instanceof context.HTMLElement);
});
ava_1.default('instances', (t) => {
    const context = {};
    const doc = src_1.createHTMLDocument('test', 'http://localhost/');
    globals_1.populateGlobals(context, doc);
    t.is(context.document, doc);
    t.is(context.document.defaultView, context);
    t.is(context.window, context);
    t.is(context.self, context);
    t.is(context.top, context);
});
ava_1.default('existing self', (t) => {
    const context = {};
    const doc = src_1.createHTMLDocument('test', 'http://localhost/');
    Object.defineProperty(context, 'self', {
        get() {
            return context;
        },
        set(value) {
            throw new Error('Cannot override "self".');
        }
    });
    t.notThrows(() => {
        globals_1.populateGlobals(context, doc);
    });
});
