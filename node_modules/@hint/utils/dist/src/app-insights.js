"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isConfigured = exports.getClient = exports.trackEvent = exports.trackException = exports.sendPendingData = exports.disable = exports.enable = exports.isEnabled = void 0;
const appInsights = require("applicationinsights");
const configStore = require("./config-store");
const utils_debug_1 = require("@hint/utils-debug");
const debug = utils_debug_1.debug(__filename);
const configStoreKey = 'insight';
let insightsEnabled = configStore.get(configStoreKey);
let appInsightsClient = {
    flush(options) {
        debug('Application Insights is not enabled.');
        options.callback();
    },
    trackEvent() {
        debug('Application Insights is not enabled.');
    },
    trackException() {
        debug('Application Insights is not enabled.');
    }
};
const enableInsight = () => {
    debug('Enabling Application Insights');
    appInsights.setup('8ef2b55b-2ce9-4c33-a09a-2c3ef605c97d')
        .setAutoDependencyCorrelation(true)
        .setAutoCollectRequests(true)
        .setAutoCollectPerformance(true)
        .setAutoCollectExceptions(true)
        .setAutoCollectDependencies(true)
        .setUseDiskRetryCaching(true)
        .setInternalLogging(false, false)
        .start();
    appInsightsClient = appInsights.defaultClient;
};
if (insightsEnabled) {
    enableInsight();
}
else {
    debug('Application Insight disabled');
}
exports.isEnabled = () => {
    return insightsEnabled;
};
exports.enable = () => {
    debug('User is enabling Application Insights');
    configStore.set(configStoreKey, true);
    insightsEnabled = true;
    enableInsight();
};
exports.disable = () => {
    debug('User is disabling Application Insights');
    configStore.set(configStoreKey, false);
    insightsEnabled = false;
};
exports.sendPendingData = (isAppCrashing = false) => {
    debug('Sending pending data to Application Insights');
    return new Promise((resolve) => {
        appInsightsClient.flush({
            callback: (message) => {
                debug(message);
                return resolve();
            },
            isAppCrashing
        });
    });
};
exports.trackException = (error) => {
    debug(`Sending exception to Application Insights: ${error.toString()}`);
    appInsightsClient.trackException({ exception: error });
};
exports.trackEvent = (name, properties) => {
    debug(`Sending event "${name}" to Application Insights with value ${JSON.stringify(properties)}`);
    appInsightsClient.trackEvent({ name, properties: { config: JSON.stringify(properties, null, 2) } });
};
exports.getClient = () => {
    debug('Getting Application Insights client');
    return appInsightsClient;
};
exports.isConfigured = () => {
    return typeof configStore.get(configStoreKey) !== 'undefined';
};
