"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_types_1 = require("@hint/utils-types");
const hint_scope_1 = require("hint/dist/src/lib/enums/hint-scope");
const i18n_import_1 = require("../i18n.import");
const meta = {
    docs: {
        category: utils_types_1.Category.accessibility,
        description: i18n_import_1.getMessage('other_description', 'en'),
        name: i18n_import_1.getMessage('other_name', 'en')
    },
    getDescription(language) {
        return i18n_import_1.getMessage('other_description', language);
    },
    getName(language) {
        return i18n_import_1.getMessage('other_name', language);
    },
    id: 'axe/other',
    schema: [
        {
            additionalProperties: false,
            properties: {
                'avoid-inline-spacing': { enum: ['off', 'warning', 'error'], type: 'string' },
                'identical-links-same-purpose': { enum: ['off', 'warning', 'error'], type: 'string' },
                'label-content-name-mismatch': { enum: ['off', 'warning', 'error'], type: 'string' },
                'no-autoplay-audio': { enum: ['off', 'warning', 'error'], type: 'string' },
                'scrollable-region-focusable': { enum: ['off', 'warning', 'error'], type: 'string' }
            }
        },
        {
            items: {
                enum: ['avoid-inline-spacing', 'identical-links-same-purpose', 'label-content-name-mismatch', 'no-autoplay-audio', 'scrollable-region-focusable'],
                type: 'string'
            },
            typeof: 'array',
            uniqueItems: true
        }
    ],
    scope: hint_scope_1.HintScope.any
};
exports.default = meta;
